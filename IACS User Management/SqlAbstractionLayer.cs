using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.SqlClient;

namespace IACS_User_Management
{
    class SqlAbstractionLayer
    {
        private String dbUserName;
        private String dbPassword;
        private String serverName;
        private String dbName;
        private String mapImage = "
        
        // ca28ArchiveDB09142012_135754
        // ca28LiveDB09142012_135754
        public SqlAbstractionLayer(String _serverName = @"SQLPRIMARY", String _dbName = "ca28LiveDB09142012_135754", String _dbUserName = @"EventViewer", String _dbPassword = "8eac0n#2")
        {
            dbUserName  = _dbUserName;
            dbPassword  = _dbPassword;
            serverName  = _serverName;
            dbName      = _dbName;
        }

        public bool DeleteRows(String tableName, Dictionary<String, String> WHERE, ref String errMsg)
        {
            // build our query:
            SqlConnectionStringBuilder conStr = new SqlConnectionStringBuilder();
            StringBuilder query = new StringBuilder();
            String qs = "";
            bool firstOne = true;

            query.Append("DELETE FROM ");
            query.Append(tableName.Trim());
            query.Append(" WHERE ");

            firstOne = true;
            foreach (KeyValuePair<String, String> item in WHERE)
            {
                if (firstOne)
                {
                    query.Append(item.Key);
                    query.Append(" = @");
                    query.Append(item.Key);
                    firstOne = false;
                }
                else
                {
                    query.Append(" AND ");
                    query.Append(item.Key);
                    query.Append(" = @");
                    query.Append(item.Key);
                }
            }

            qs = query.ToString();

            // Use the query here:
            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            try
            {
                using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
                {
                    SqlCommand command = new SqlCommand(qs, connection);

                    foreach (KeyValuePair<String, String> item in WHERE)
                    {
                        command.Parameters.AddWithValue("@" + item.Key, item.Value);
                    }

                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                errMsg = ex.Message;
                return false;
            }

            query.Clear();
            return true;
        }

        private bool DoInsert(String tableName, Dictionary<String, String> items, ref String errMsg)
        {
            // build our query:
            SqlConnectionStringBuilder conStr   = new SqlConnectionStringBuilder();
            StringBuilder query                 = new StringBuilder();
            String qs                           = "";
            bool firstOne                       = true;

            query.Append("INSERT INTO ");
            query.Append(tableName.Trim());
            query.Append(" (");

            firstOne = true;
            foreach (KeyValuePair<String, String> item in items)
            {
                if (firstOne)
                {
                    query.Append(item.Key);
                    firstOne = false;
                }
                else
                {
                    query.Append(", ");
                    query.Append(item.Key);
                }
            }

            query.Append(") VALUES (");

            firstOne = true;
            foreach (KeyValuePair<String, String> item in items)
            {
                if (firstOne)
                {
                    query.Append("@");
                    query.Append(item.Key);
                    firstOne = false;
                }
                else
                {
                    query.Append(", @");
                    query.Append(item.Key);
                }
            }

            query.Append(")");

            qs = query.ToString();

            // Use the query here:
            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false;
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            try
            {
                using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
                {
                    SqlCommand command = new SqlCommand(qs, connection);

                    foreach (KeyValuePair<String, String> item in items)
                    {
                        command.Parameters.AddWithValue("@" + item.Key, item.Value);
                    }

                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
            catch (Exception ex)
            {
                errMsg = ex.Message;
                return false;
            }

            query.Clear();
            return true;
        }

        public bool CreateOperatorPrivilage(String privName, ref String errMsg)
        {
            Dictionary<String, String> values = new Dictionary<String, String>();
            int id = 0;

            if (!GetNewPrivilageIdNumber(ref id, ref errMsg))
            {
                errMsg = "Could not get new NoPriv (privilage id number)";
                return false;
            }

            values.Clear();
            values.Add("NoPriv", id.ToString());
            values.Add("Priv", privName);

            if (!DoInsert("dbo.Privileg", values, ref errMsg))
            {
                errMsg = "Could not add operator privilage configuration to the database: " + errMsg;
                return false;
            }

            return true;
        }

        public bool GetRows(String tableName, List<String> colNames, Dictionary<String, String> WHERE, ref List<Object[]> dbRows, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr   = new SqlConnectionStringBuilder();
            StringBuilder query                 = new StringBuilder();
            bool firstOne                       = true;

            if (dbRows == null) { dbRows = new List<Object[]>(); }
            dbRows.Clear();

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            query.Append("SELECT ");
            query.Append((colNames == null || colNames.Count.Equals(0) ? 
                (Func<String>)(() => { return "*"; }) : 
                (Func<String>)(() => {
                    foreach (String colName in colNames)
                    {
                        query.Append(firstOne ? colName : ", ");
                        if (!firstOne) { query.Append(colName); }

                        firstOne = false;
                    }
                    return " ";
                }))());

            query.Append(" FROM ");
            query.Append(tableName.Trim());

            if (!(WHERE == null || WHERE.Count.Equals(0)))
            {
                query.Append(" WHERE ");

                firstOne = true;
                foreach (KeyValuePair<String, String> item in WHERE)
                {
                    if (firstOne)
                    {
                        query.Append(item.Key);
                        query.Append(" = @");
                        query.Append(item.Key);
                        firstOne = false;
                    }
                    else
                    {
                        query.Append(" AND ");
                        query.Append(item.Key);
                        query.Append(" = @");
                        query.Append(item.Key);
                    }
                }
            }
            
            String queryString = query.ToString();
            Object[] row;

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    SqlCommand command = new SqlCommand(queryString, connection);

                    if (!(WHERE == null))
                    {
                        foreach (KeyValuePair<String, String> item in WHERE)
                        {
                            command.Parameters.AddWithValue("@" + item.Key, item.Value);
                        }
                    }
                    
                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        row = new Object[reader.FieldCount];
                        reader.GetValues(row);
                        dbRows.Add(row);
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    return false;
                }

                return true;
            }
        }

        public bool DeletePartition(String partitionName, ref String errMsg)
        {
            Dictionary<String, String> values = new Dictionary<String, String>();

            values.Add("Name", partitionName);

            return DeleteRows("dbo.Groups", values, ref errMsg);
        }

        public bool CreateOperator(String scrName, String fullName, String privGroup, ref String errMsg)
        {
            Dictionary<String, String> values   = new Dictionary<String, String>();
            int privNo                          = 0;
            int newOpNo                         = 0;

            if (!GetPrivNumber(privGroup, ref errMsg))
            {
                errMsg = "Could not create operator because the privilage group specified could not be found: " + errMsg;
                return false;
            }

            try
            {
                privNo = int.Parse(errMsg);
            }
            catch (Exception)
            {
                errMsg = "Unexpected result from 'GetPrivNumber' Could con convert '" + errMsg + "' to an integer.";
            }

            if (!GetNewOperatorIdNumber(ref newOpNo, ref errMsg))
            {
                errMsg = "Could not get new operator id: " + errMsg;
                return false;
            }

            // password 'new' = 09EBA42BC31824

            values.Clear();
            values.Add("OpNo", newOpNo.ToString());
            values.Add("ScrName", scrName);
            values.Add("Name", fullName);
            values.Add("Passwrd", "09EBA42BC31824"); // Set the new operator's login to 'new'.
            values.Add("Priv", privNo.ToString());
            values.Add("Changed", DateTime.Now.ToString());
            values.Add("GroupNo", "0");
            values.Add("AckTO", "5");
            values.Add("Opt", "0");
            values.Add("Flag", "1");
            values.Add("AutoAck", "0");
            values.Add("UP_CBCaptions", "1");
            values.Add("UP_CBIcons", "1");
            values.Add("UP_UseBg", "1");
            values.Add("UP_BgIndex", "0");
            values.Add("UP_X", "10");
            values.Add("UP_Y", "10");
            values.Add("UP_Width", "1024");
            values.Add("UP_Height", "768");
            values.Add("UP_Monitor", "1");
            values.Add("UP_Control", "1");
            values.Add("UP_ShowPhoto", "0");
            values.Add("LogOffTime", "5");
            values.Add("EventViewCount", "10");
            values.Add("EventViewDay", "1");
            values.Add("EventViewSpan", "1");
            values.Add("OperUseSNPP", "0");
            values.Add("OperUseEmail", "0");
            values.Add("OperSNPPHostId", "0");
            values.Add("ManualControlDblClick", "0");

            if (!DoInsert("dbo.Oper", values, ref errMsg))
            {
                errMsg = "Could not add operator privilage configuration to the database: " + errMsg;
                return false;
            }

            return true;
        }

        public bool CreateMap(String name, ref int mapId, ref String errMsg)
        {
            Dictionary<String, String> values   = new Dictionary<String, String>();
            List<String> collNames              = new List<String>();
            List<Object[]> rows;
            int newMapId = 0;

            rows = new List<Object[]>();
            collNames.Add("MapId");
            collNames.Add("MapName");

            if (!GetRows("dbo.Map", collNames, null, ref rows, ref errMsg))
            {
                errMsg = "Could not get the next panel number, because the current list of panels coud not be retrieved: " + errMsg;
                return false;
            }

            try
            {
                foreach (Object[] row in rows)
                {
                    if (name.ToLower().Trim().Equals(row[1].ToString().ToLower().Trim()))
                    {
                        errMsg = "Duplicate map already exists in the database!";
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                errMsg = "Unexpected data returned for dbo.Map.MapName: " + ex.Message;
                return false;
            }

            // Get the new panel id:
            try
            {
                foreach (Object[] row in rows)
                {
                    newMapId = (newMapId < int.Parse(row[0].ToString())) ? int.Parse(row[0].ToString()) : newMapId;
                }
            }
            catch (Exception ex)
            {
                errMsg = "Unexpected data returned for dbo.Map.MapId: " + ex.Message;
                return false;
            }

            newMapId    += 1;
            mapId       = newMapId;

            values.Add("MapId", newMapId.ToString());
            values.Add("MapName", name);

            if (!DoInsert("dbo.Map", values, ref errMsg))
            {
                errMsg = "Could not add operator privilage configuration to the database: " + errMsg;
                return false;
            }

            return true;
        }

        public bool CreatPanel(String description, String privGroup, String GroupName, int mapId, ref String errMsg)
        {
            Dictionary<String, String> values = new Dictionary<String, String>();
            List<Object[]> rows;
            List<String> cols   = new List<String>();
            String tmp          = "";
            String deviceId     = "";
            int privNo          = 0;
            int groupNo         = 0;
            int devIdLength     = 12;
            int thisNumber      = 0;
            int newPanelNumber  = 0;
            int newCommPort     = 0;
            bool exit           = true;
            Guid guid;

            if (!GetPrivNumber(privGroup, ref errMsg))
            {
                errMsg = "Could not create operator because the privilage group specified could not be found: " + errMsg;
                return false;
            }

            try
            {
                privNo = int.Parse(errMsg);
            }
            catch (Exception)
            {
                errMsg = "Unexpected result from 'GetPrivNumber' Could con convert '" + errMsg + "' to an integer.";
            }

            rows = new List<Object[]>();
            if (!GetRows("dbo.Panel", null, null, ref rows, ref errMsg))
            {
                errMsg = "Could not get the next panel number, because the current list of panels coud not be retrieved: " + errMsg;
                return false;
            }

            // Get the new panel id:
            foreach (Object[] row in rows)
            {
                thisNumber      = int.Parse(row[0].ToString());
                newPanelNumber  = (thisNumber > newPanelNumber) ? thisNumber : newPanelNumber;
            }

            newPanelNumber += 1;

            while (true)
            {
                // Verify the new GUID is unique:
                guid = Guid.NewGuid();
                exit = true;
                foreach (Object[] row in rows)
                {
                    tmp = row[30].ToString();
                    if(guid.ToString().Equals(tmp)) { exit = false; }
                }

                if (exit) { break; }
            }

            // Get the next available comm port:
            thisNumber = 0;
            foreach (Object[] row in rows)
            {
                thisNumber      = int.Parse(row[3].ToString());
                newCommPort  = (thisNumber > newCommPort) ? thisNumber : newCommPort;
            }

            newCommPort += 1;
            deviceId    = newCommPort.ToString();

            tmp = newPanelNumber.ToString();

            if (tmp.Length < 3)
            {
                tmp = (tmp.Length == 1) ? ".00" + tmp + ".000" : ".0" + tmp + ".00";
            }

            // Get Group Number:
            rows = new List<Object[]>();
            cols.Clear();
            cols.Add("ItemNo");
            cols.Add("Name");

            values.Clear();
            values.Add("Name", GroupName);

            if (!GetRows("dbo.Groups", cols, values, ref rows, ref errMsg))
            {
                errMsg = "Could not get the group id number, because the current list of groups coud not be retrieved: " + errMsg;
                return false;
            }

            if (!(rows.Count > 0))
            {
                errMsg = "Could not get the group id number, because no groups could be retrieved from the database.";
                return false;
            }

            try
            {
                groupNo = int.Parse(rows[0][0].ToString());
            }
            catch (Exception ex)
            {
                errMsg = "Unexpected data from the database! the error returned is:" + ex.Message;
                return false;
            }

            // Build the Device Id:
            devIdLength = devIdLength - deviceId.Length;
            for (int count = 0; count < devIdLength; count++)
            {
                deviceId = "0" + deviceId;
            }
            deviceId = "000." + deviceId + tmp;

            values.Clear();
            values.Add("PnlNo", newPanelNumber.ToString());
            values.Add("Description", description);
            values.Add("Address", "1");
            values.Add("ComPort", newCommPort.ToString());
            values.Add("Cluster", "0");
            values.Add("Enabled", "1");
            values.Add("Interactive", "0");
            values.Add("NoFail", "0");
            values.Add("XactSize", "1000");
            values.Add("Node", "0");
            values.Add("Changed", DateTime.Now.ToString());
            values.Add("GroupNo", groupNo.ToString());
            values.Add("Flag", "0");
            values.Add("MapId", mapId.ToString());
            values.Add("DeviceId", deviceId);
            values.Add("CommPrior", "50");
            values.Add("DwnLoadPrior", "70");
            values.Add("PwrPrior", "20");
            values.Add("RespReq", "0");
            values.Add("Schedules", "150");
            values.Add("Elevators", "0");
            values.Add("ModemPrior", "50");
            values.Add("Passwrd", "0");
            values.Add("DegradeMode", "0");
            values.Add("AGSize", "256");
            values.Add("Sphere", "0");
            values.Add("PanelType", "3");
            values.Add("caObjectId", guid.ToString());
            values.Add("MaxAlp", "227");
            values.Add("MaxEvt", "227");
            values.Add("DefaultCalendar", "0");
            values.Add("NAPCOPanel", "0");
            values.Add("ZoneId", "30");
            values.Add("LockUpdateSchedule", "0");
            values.Add("LockType", "0");
            values.Add("LockAssigned", "0");
            values.Add("LockChanged", "0");
            values.Add("RemoteDevice", "0");

            errMsg = "";
            if (!DoInsert("dbo.Panel", values, ref errMsg))
            {
                errMsg = "Could not add panel to the database: " + errMsg;
                return false;
            }

            return true;
        }

        public bool CreatePartition(String partitionName, ref String errMsg)
        {

            Dictionary<String, String> values   = new Dictionary<String, String>();
            List<int> groupIds                  = new List<int>();
            int itemNo                          = GetNewGroupItemNumber(ref errMsg);

            if (itemNo < 0)
            {
                return false;
            }

            for (int i = 0; i < 22; i++)
            {
                if (i != 2 && i != 5 && i != 10 && i != 11 && i != 18)
                {
                    groupIds.Add(i);
                }
            }

            foreach (int id in groupIds)
            {
                values.Clear();
                values.Add("GroupId", id.ToString());
                values.Add("ItemNo", itemNo.ToString());
                values.Add("Name", partitionName);
                values.Add("Activ", "0");
                values.Add("Flag", "0");
                values.Add("Changed", DateTime.Now.ToString());

                if (!DoInsert("dbo.Groups", values, ref errMsg))
                {
                    errMsg = "Could not add group configuration to the database: " + errMsg;
                    return false;
                }
            }

            return true;
        }


        public bool GetPartitionList(ref List<String> partitionNames, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr = new SqlConnectionStringBuilder();

            if (partitionNames == null) { partitionNames = new List<String>(); }
            partitionNames.Clear();

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            String queryString = "SELECT [Name] FROM Groups";

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    int paramValue1 = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@Name", paramValue1);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        if (!partitionNames.Contains(reader[0].ToString()))
                        {
                            partitionNames.Add(reader[0].ToString());
                        }
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    return false;
                }

                return true;
            }
        }

        public bool GetAccessGroupObjId(int GroupId, ref String objId, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr = new SqlConnectionStringBuilder();

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;
            objId                       = "";

            String queryString = "SELECT [caObjectId] FROM AccGrp WHERE Agno=" + GroupId;

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    int paramValue1 = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@caObjectId", paramValue1);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        //if (!partitionNames.Contains(reader[0].ToString()))
                        //{
                        //    partitionNames.Add(reader[0].ToString());
                        //}
                        objId = reader[0].ToString();
                        break;
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    return false;
                }

                return true;
            }
        }

        public bool GetPartitionAndGroupNo(ref Dictionary<String, int> combo, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr = new SqlConnectionStringBuilder();

            if (combo == null) { combo = new Dictionary<String, int>(); }
            combo.Clear();

            conStr.DataSource = serverName;
            conStr.InitialCatalog = dbName;
            conStr.IntegratedSecurity = false; // Sql Server Authentification
            conStr.UserID = dbUserName;
            conStr.Password = dbPassword;

            String queryString = "SELECT [Name], [ItemNo] FROM Groups";

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    int paramValue1 = 1;
                    int paramValue2 = 2;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@Name", paramValue1);
                    command.Parameters.AddWithValue("@ItemNo", paramValue2);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        if (!combo.Keys.Contains(reader[0].ToString()))
                        {
                            combo.Add(reader[0].ToString(), Int32.Parse(reader[1].ToString()));
                        }
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    return false;
                }

                return true;
            }
        }

        public bool GetCardInfoByOrg(String orgName, ref String csv, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr   = new SqlConnectionStringBuilder();
            StringBuilder sb                    = new StringBuilder();
            Dictionary<String, String> accGroup = new Dictionary<String, String>();
            int groupNo                         = -1;

            Dictionary<String, int> combo = new Dictionary<String, int>();
            //combo.Clear();

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            if (!GetPartitionAndGroupNo(ref combo, ref errMsg))
            {
                return false;
            }

            if (!combo.TryGetValue(orgName, out groupNo))
            {
                errMsg = "Organization not found!";
                return false;
            }

            String queryString          = "SELECT [Badge], [AGroup1], [Enabled], [LastName], [FrstName] FROM Badge WHERE GroupNo=" + groupNo;

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    String val      = "";
                    int paramValue1 = 1;
                    int paramValue2 = 2;
                    int paramValue3 = 3;
                    int paramValue4 = 4;
                    int paramValue5 = 5;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@Badge", paramValue1);
                    command.Parameters.AddWithValue("@AGroup1", paramValue2);
                    command.Parameters.AddWithValue("@Enabled", paramValue3);
                    command.Parameters.AddWithValue("@LastName", paramValue4);
                    command.Parameters.AddWithValue("@FrstName", paramValue5);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    sb.Append("LAST NAME");
                    sb.Append(", ");
                    sb.Append("FIRST NAME");
                    sb.Append(", ");
                    sb.Append("BADGE NUMBER");
                    sb.Append(", ");
                    sb.Append("ACCESS GROUP ID");
                    sb.Append(", ");
                    sb.Append("ENABLED / DISABLED\n");

                    while (reader.Read())
                    {
                        //if (!combo.Keys.Contains(reader[0].ToString()))
                        //{
                        //    combo.Add(reader[0].ToString(), Int32.Parse(reader[1].ToString()));
                        //}
                        sb.Append(reader[3].ToString().Replace(",", ""));
                        sb.Append(", ");
                        sb.Append(reader[4].ToString().Replace(",", ""));
                        sb.Append(", ");
                        sb.Append(reader[0].ToString().Replace(",", ""));
                        sb.Append(", ");

                        val = "";
                        if (accGroup.TryGetValue(reader[1].ToString(), out val))
                        {
                            sb.Append(val);
                        }
                        else
                        {
                            if(GetAccessGroupObjId(int.Parse(reader[1].ToString()), ref val, ref errMsg)) 
                            {
                                accGroup.Add(reader[1].ToString(), val);
                                sb.Append(val);
                            }
                        }

                        //sb.Append(reader[1].ToString());
                        sb.Append(", ");
                        sb.Append(bool.Parse(reader[2].ToString()) == true ? "Enabled\n" : "Disabled\n");
                    }

                    reader.Close();
                    csv = sb.ToString();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    return false;
                }

                return true;
            }
        }

        private bool GetGroupItemNo(String name, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr = new SqlConnectionStringBuilder();

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            errMsg = "";

            String queryString = "SELECT [ItemNo] FROM Groups WHERE Name = '" + name + "'";

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    int paramValue = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@ItemNo", paramValue);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        errMsg = reader[0].ToString();
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    connection.Close();
                    return false;
                }

                connection.Close();

                if (errMsg.Trim().Equals("")) { errMsg = "No data returned."; return false; }
                return true;
            }
        }



        private bool GetPrivNumber(String priv, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr = new SqlConnectionStringBuilder();

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            errMsg = "";

            String queryString = "SELECT [NoPriv] FROM Privileg WHERE Priv = '" + priv + "'";
            try
            {
                using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
                {

                    int paramValue = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@NoPriv", paramValue);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        errMsg = reader[0].ToString();
                    }

                    reader.Close();
                    connection.Close();

                    if (errMsg.Trim().Equals("")) { errMsg = "No data returned."; return false; }
                    return true;
                }
            }
            catch (Exception ex)
            {
                errMsg = ex.Message;
                return false;
            }
        }

        private bool VerifyPartitionExists(String partitionName, ref String errMsg)
        {

            List<String> partitions = new List<String>();

            if (!GetPartitionList(ref partitions, ref errMsg))
            {
                errMsg = "Could not get the list of partitions from the database: " + errMsg;
                return false;
            }

            foreach (String partition in partitions)
            {
                if (partition.Trim().ToLower().Equals(partitionName.Trim().ToLower()))
                {
                    errMsg = partitionName + " exists.";
                    return true;
                }
            }

            errMsg = partitionName + " does not exist.";
            return false;
        }

        /// <summary>
        /// You must create a partition and a privilage of the same name first!
        /// </summary>
        /// <param name="partitionName"></param>
        /// <param name="errMsg"></param>
        /// <returns></returns>
        public bool CreateSphere(String partitionName, ref String errMsg)
        {
            int groupItemNo                     = 0;
            int NoPriv                          = 0;
            Dictionary<String, String> values   = new Dictionary<String, String>();
            List<int> groupIds                  = new List<int>();

            if (!VerifyPartitionExists(partitionName, ref errMsg))
            {
                errMsg = "Can not create sphere: Database partition does not exist.";
                return false;
            }

            if (!GetGroupItemNo(partitionName, ref errMsg))
            {
                errMsg = "Could not get GroupItemNo: " + errMsg;
                return false;
            }
            else
            {
                try
                {
                    groupItemNo = int.Parse(errMsg);
                }
                catch (Exception)
                {
                    errMsg = "Could not retrieve the groupItemNo for partition: " + partitionName;
                    return false;
                }
            }

            if (!GetPrivNumber(partitionName, ref errMsg))
            {
                errMsg = "Could not get GroupItemNo: " + errMsg;
                return false;
            }
            else
            {
                try
                {
                    NoPriv = int.Parse(errMsg);
                }
                catch (Exception)
                {
                    errMsg = "Could not retrieve the NoPriv number for the Operator Privelage: " + partitionName;
                    return false;
                }
            }

            for (int i = 0; i < 22; i++)
            {
                if (i != 2 && i != 5 && i != 10 && i != 11 && i != 18)
                {
                    groupIds.Add(i);
                }
            }

            foreach (int id in groupIds)
            {
                values.Clear();
                values.Add("OperPrivId", NoPriv.ToString());
                values.Add("GroupId", id.ToString());
                values.Add("GroupNo", groupItemNo.ToString());
                values.Add("Changed", DateTime.Now.ToString());
                values.Add("Partition", (id == 0) ? groupItemNo.ToString() : id.ToString() + "00" + groupItemNo.ToString());
                values.Add("Restriction", "0");

                if (!DoInsert("dbo.Sphere", values, ref errMsg))
                {
                    errMsg = "Could not add group configuration to the database: " + errMsg;
                    return false;
                }
            }

            return true;
        }

        public bool GetNewOperatorIdNumber(ref int id, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr   = new SqlConnectionStringBuilder();
            List<int> itemNumbers               = new List<int>();
            int itemNumber                      = 0;

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false;
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            String queryString = "SELECT [OpNo] FROM Oper";

            try
            {
                using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
                {

                    int paramValue = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@OpNo", paramValue);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        if (!itemNumbers.Contains(Int32.Parse(reader[0].ToString())))
                        {
                            itemNumbers.Add(Int32.Parse(reader[0].ToString()));
                        }
                    }

                    if (itemNumbers.Count > 0)
                    {
                        foreach (Int32 number in itemNumbers)
                        {
                            if (number > itemNumber) { itemNumber = number; }
                        }
                    }

                    reader.Close();

                    id = (itemNumber + 1);
                    return true;
                }
            }
            catch (Exception ex)
            {
                errMsg = ex.Message;
                id = -1;
                return false;
            }
        }

        private bool GetNewPrivilageIdNumber(ref int id, ref String errMsg)
        {
            SqlConnectionStringBuilder conStr   = new SqlConnectionStringBuilder();
            List<int> itemNumbers               = new List<int>();
            int itemNumber                      = 0;

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false;
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            String queryString = "SELECT [NoPriv] FROM Privileg";

            try
            {
                using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
                {

                    int paramValue = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@NoPriv", paramValue);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        if (!itemNumbers.Contains(Int32.Parse(reader[0].ToString())))
                        {
                            itemNumbers.Add(Int32.Parse(reader[0].ToString()));
                        }
                    }

                    if (itemNumbers.Count > 0)
                    {
                        foreach (Int32 number in itemNumbers)
                        {
                            if (number > itemNumber) { itemNumber = number; }
                        }
                    }

                    reader.Close();

                    id = (itemNumber + 1);
                    return true;
                }
            }
            catch (Exception ex)
            {
                errMsg = ex.Message;
                id = -1;
                return false;
            }
        }

        public int GetNewGroupItemNumber(ref String errMsg)
        {
            SqlConnectionStringBuilder conStr   = new SqlConnectionStringBuilder();
            List<int> itemNumbers               = new List<int>();
            int itemNumber                      = 0;

            conStr.DataSource           = serverName;
            conStr.InitialCatalog       = dbName;
            conStr.IntegratedSecurity   = false; // Sql Server Authentification
            conStr.UserID               = dbUserName;
            conStr.Password             = dbPassword;

            String queryString = "SELECT [ItemNo] FROM Groups";

            using (SqlConnection connection = new SqlConnection(conStr.ConnectionString))
            {
                try
                {
                    int paramValue = 1;
                    SqlCommand command = new SqlCommand(queryString, connection);
                    command.Parameters.AddWithValue("@ItemNo", paramValue);

                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        if (!itemNumbers.Contains(Int32.Parse(reader[0].ToString())))
                        {
                            itemNumbers.Add(Int32.Parse(reader[0].ToString()));
                        }
                    }

                    if (itemNumbers.Count > 0)
                    {
                        foreach (Int32 number in itemNumbers)
                        {
                            if (number > itemNumber) { itemNumber = number; }
                        }
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    errMsg = ex.Message;
                    return -1;
                }

                return itemNumber + 1;
            }
        } // - END GetNewGroupItemNumber()
    }
}
